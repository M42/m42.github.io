#+TITLE:       Matemáticas en Emacs
#+AUTHOR:      Mario Román
#+EMAIL:       mromang08@gmail.com
#+DATE:        2016-09-26 Mon
#+URI:         /blog/%y/%m/%d/cpp-template-meta-programming-advanced/
#+KEYWORDS:    Emacs
#+TAGS:        
#+LANGUAGE:    es
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: Tomando apuntes de matemáticas en Emacs

** Apuntes a ordenador

Tomar apuntes de matemáticas con el ordenador es una tarea difícil. Hay que usar
un montón de notación (símbolos, letras en otros alfabetos, índices...) que es
difícil de controlar en un editor normal y además hacerlo a una velocidad 
considerable para no quedarse atrás respecto del bolígrafo, que no tiene ese 
problema. Además, los diagramas, dibujos, flechas o anotaciones no textuales que
tomemos parecen imposibles de transcribir fielmente a un fichero si no es con
mucho tiempo de por medio.

Todos esos problemas no parece solucionarlos *Latex* de ninguna forma (al fin y
al cabo, Latex estaría pensado para edición de libros, no para tomar apuntes).
*Markdown* simplifica mucho el poder escribir, pero parece que pierde mucha 
potencia respecto a Latex. No me imagino teniendo que escribir grandes listados
de ejercicios en un sólo fichero de Markdown. Así que mi solución es usar 
Emacs con *org-mode*.

** Ventajas de org-mode

*org-mode* tiene internamente un lenguaje de marcado similar al de markdown, con
la ventaja para el usuario de Emacs de que está adaptado precisamente para 
Emacs. Permite escribir fórmulas en Latex y exportar luego a =.tex= y =.pdf=, 
controlando las opciones de Latex. 

Una fórmula en Latex puede escribirse directamente en *org-mode* incluyéndola
entre =\( ... \)=, si está dentro de una línea de texto; o entre =\[ ... \]=
cuando queremos que se muestre aparte del texto.

\[ \sum_{n=0}^\infty \frac{1}{2^n} \]

Y cuando terminamos de escribirla podemos [[http://orgmode.org/worg/org-tutorials/org-latex-preview.html][previsualizarla]] directamente con
=C-c C-x C-l=. Así vamos comprobando que hemos escrito las fórmulas 
correctamente y de paso nos acercamos peligrosamente a un editor [[https://es.wikipedia.org/wiki/WYSIWYG][WYSIWYG]].
 
** Zoom
Un problema menor al configurar todo esto es que las fórmulas previsualizadas
me parecían demasiado pequeñas. Aunque estén en proporción con el texto, cuesta
más leerlas; y cuando aumentamos el tamaño del texto con =C-x C-+=, las 
fórmulas no se amplían con él. Para conseguir que lo hagan hay que incluir otro
pequeño truco, mezcla de dos respuestas de [[http://emacs.stackexchange.com/questions/3387/how-to-enlarge-latex-fragments-in-org-mode-at-the-same-time-as-the-buffer-text][thisirs y Mark]] en Stack Overflow:

#+BEGIN_SRC emacs-lisp
(defun update-org-latex-fragment-scale ()
  (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
    (plist-put org-format-latex-options :scale (* 1.2 text-scale-factor)))
)
(add-hook 'text-scale-mode-hook 'update-org-latex-fragment-scale)
#+END_SRC

** Aumentando la velocidad de escritura

Mi objetivo principal con todo esto era escribir matemáticas más rápidamente, así
que [[http://emacs.stackexchange.com/questions/26322/math-autocompletion-in-org-mode][pregunté sobre autocompletado]] y concluí en usar =latex-math-mode=. Esto 
permite incluir comandos de Latex con atajos de teclado. En su configuración
original usa el caracter =`= para acceder a ellos, así que =`-a= escribe =\alpha=.
Yo he decidido cambiar el acento invertido, que ya cuesta dos pulsaciones en el
teclado en español, por la =ç=, que no la suelo usar. Además de los que incluye
el paquete por defecto, se pueden escribir atajos propios.

Por otro lado, empecé a usar *yasnippets* en Emacs. Son cómodos, fáciles de programar,
y me permiten simplificar tareas como escribir diagramas conmutativos o complejos
simpliciales en pocos pasos.

** Diagramas conmutativos

Ahora estoy escribiendo sobre álgebra homológica y teoría de categorías, así que
la mayoría de lo que escribo usa secuencias exactas y diagramas conmutativos.

Para las secuencias exactas tengo simplemente
una plantilla con =yasnippet=, que me deja 
incluirlas escribiendo =complex_= y pulsando =<tab>=:

#+BEGIN_SRC 
# -*- mode: snippet -*-
# name: complex
# key: complex_
# --
\[ $1 \overset{$6}\longrightarrow $2 \overset{$7}\longrightarrow $3 
\overset{$8}\longrightarrow $4 \overset{$9}\longrightarrow $5 \]
#+END_SRC

Para los diagramas conmutativos, la solución es un poco más compleja. El
paquete *tikz* de Latex es muy útil para escribirlos pero es demasiado complejo,
así que existe *tikz-cd*, que simplifica su sintaxis para diagramas no 
conmutativos. Para usarlo, hay que empezar por incluir en el archivo
de configuración =init.el= las siguientes líneas: 

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "tikz" t))
  (eval-after-load "preview"
    '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
#+END_SRC

Y además, en mi caso, tuve que cambiar el programa con el que generaba las
imágenes. Parece funcionar sólo *imagemagick*:

#+BEGIN_SRC emacs-lisp
(setq org-latex-create-formula-image-program 'imagemagick)
#+END_SRC
