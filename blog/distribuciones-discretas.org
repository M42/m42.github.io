#+TITLE:       Distribuciones discretas con mónadas
#+AUTHOR:      Mario Román
#+EMAIL:       mromang08@gmail.com
#+DATE:        2016-12-10 Sat
#+URI:         /blog/%y/%m/%d/distribuciones-discretas/
#+KEYWORDS:    
#+TAGS:        emacs
#+LANGUAGE:    es
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: Modelando distribuciones discretas con mónadas

** El modelo
Como parte de una serie de ejemplos sobre uso de mónadas, he escrito un
poco de código para modelar distribuciones discretas usando mónadas.

Por un lado, usa un [[https://math.dartmouth.edu/archive/m20f11/public_html/RANDOMNESS_LCG.pdf][generador congruencial lineal]] para generar números
aleatorios; y por otro, usa la mónada [[https://wiki.haskell.org/State_Monad][State]] para pasar una semilla aleatoria
de una función a otra que me permita seguir generado números aleatorios.

Por último, aporta un método que deriva [[http://www.zvon.org/other/haskell/Outputprelude/Show_c.html][Show]] para probar las distribuciones
y dibujar un histograma de cualquiera de ella.

** Componiendo distribuciones
Lo más útil de esta idea para mí ha sido el poder generar unas distribuciones
a partir de otras. La primera que genero es un dado de =n= caras usando la
semilla. Aquí es donde se implementa el generador congruencial:

#+BEGIN_SRC haskell
  dice :: Int -> Distribution Int
  dice n = state (\s -> (s `mod` n + 1, 16807*s `mod` 2147483647))
#+END_SRC

Que funciona como una distribución uniforme:

#+BEGIN_SRC
>>> dice 6

1:	 ################
2:	 ################
3:	 ################
4:	 ################
5:	 ################
6:	 ################
#+END_SRC

Pero desde ella puedo generar fácilmente otras usando funciones que compongan
distribuciones. Un ejemplo es usar =(⊕) = liftM2 (+)= para sumar dados:

#+BEGIN_SRC 
>>> dice 6 ⊕ dice 6

2:	 #####
3:	 ##########
4:	 ###############
5:	 ####################
6:	 ##########################
7:	 ##############################
8:	 #########################
9:	 ####################
10:	 ###############
11:	 ##########
12:	 #####
#+END_SRC

** Otras distribuciones
Y puedo crear otras distribuciones similares a partir de ellas, como la
distribución de *Bernoulli* y la *Binomial* usando funciones para composición
de mónadas:

#+BEGIN_SRC haskell
  bernoulli :: Double -> Distribution Int
  bernoulli p = do
    sample <- dice 1000000
    if (fromIntegral sample / 1000000.0 < p)
      then return 1
      else return 0

  binomial :: Int -> Double -> Distribution Int
  binomial k p = sum <$> replicateM k (bernoulli p)
#+END_SRC

Lo que me gusta de este código es que dejamos a la estructura de mónada encargarse
internamente de el paso de la semilla de aleatoriedad y podemos componer distribuciones
más simples para crear distribuciones más complejas.

** El código
El código completo se presenta aquí. Es un pequeño código que dejé de ejemplo
pero que seguramente pueda mejorarse bastante; lo dejo aquí como guión para esta 
idea:

#+HTML: <script src="https://gist.github.com/M42/7d9d2ecf174bad73804e67fd5cb8de72.js"></script>
